---
description: 
globs: 
alwaysApply: true
---
Product Requirements Document: UXTools Play Store Scraper

1. Overview
1.1 Purpose
The UXTools Play Store Scraper is a web application for extracting, analyzing, and visualizing user reviews from Google Play Store apps, designed as a showcase project that can be deployed on Vercel's free tier without requiring database infrastructure.

1.2 Business Objectives
Provide a lightweight tool for analyzing Play Store reviews without requiring backend infrastructure
Enable in-session analysis of user feedback patterns
Showcase front-end development and data visualization capabilities
Maintain zero-cost hosting on Vercel's free plan
1.3 Target Users
UX Researchers and designers looking for quick insights
Product Managers wanting to explore app feedback
App Developers troubleshooting reported issues
Portfolio visitors evaluating your development skills

2. Technical Architecture
2.1 Framework and Deployment
Framework: Remix (React-based meta-framework)
Deployment: Vercel free tier
API Integration: Remix loaders/actions for server-side processing
State Management: Remix form handling and client-side React state
Storage: Browser storage (localStorage/sessionStorage) for data persistence

2.2 Core Technologies
Scraping: google-play-scraper library
Text Analysis: natural for NLP processing
UI Components: shadcn/ui (built on Radix UI primitives)
Icons: Lucide icon pack (integrated with shadcn/ui)
Visualization: shadcn/ui built-in chart components
Styling: Tailwind CSS (used by shadcn/ui)

3. Core Features
3.1 Play Store Scraper
3.1.1 App Search and Selection
Implementation: Remix loader using google-play-scraper
Client-side caching of recent searches in localStorage
Search history display with quick access
Direct package ID input for precise app targeting

3.1.2 Review Collection System
Implementation: Small batch sizes (100 reviews per request) to stay within serverless function limits
Progress tracking for multiple requests
Pagination support for fetching additional reviews
Session-based storage of fetched reviewsRemix loader with controlled batching

3.2 Data Processing
3.2.1 Sentiment Analysis with Natural
Implementation: Server-side processing with natural library
Basic sentiment scoring using AFINN lexicon
Classification into positive/negative/neutral categories
Consideration of star rating alongside text analysis
Tokenization and stemming for better word matching

3.2.2 Topic Extraction
Implementation: Natural library's TF-IDF functionality
Identification of important terms across reviews
Removal of common stop words
Extraction of key phrases and topics
Weighting by frequency and importance

3.2.3 Client-Side Storage
Implementation: Browser storage API
Session-based storage of review data
Separate storage for analysis results
Error handling for storage limits
Clear functions for data cleanup

3.3 Data Visualization
3.3.1 Interactive Dashboard
Implementation: shadcn/ui components with built-in charts
Summary statistics cards
Rating distribution chart
Sentiment over time visualization
Filter controls affecting all charts

3.3.2 Review List View
Implementation: Virtual list with shadcn/ui components
Virtualized list for performance with large datasets
Expandable review cards
Rating stars using Lucide icons
Sentiment badges with color coding
Version information display

3.4 Data Management
3.4.1 Export System
Implementation: Client-side file generation
CSV export with proper escaping
JSON export with full data
Chart image export via DOM-to-image
Filename based on app name and date
Multiple format options

4. User Interface Design
4.1 Layout System
Implementation: Responsive layout with shadcn/ui and Tailwind
Header, main content, and footer structure
Container-based responsive layout
Theme provider for light/dark mode
Consistent spacing and borders

4.2 Key Screens
4.2.1 App Search Screen
Implementation: Search form using shadcn/ui component
Clean search interface with loading states
App card grid with essential information
Direct navigation to analysis page
Responsive grid layout for different screen sizes

4.2.2 App Analysis Page
Implementation: Tabbed interface with shadcn/ui tabs
App header with key information
Tab navigation for different analysis views. First Tab is Overview, second tab is to Review List. 
Overview dashboard with key metrics
Filter panel that persists across tabs
Export options always accessible

4.2.3 Reviews List Tab
Implementation: Tabbed interface with shadcn/ui tabs
Efficient list rendering with virtual scrolling
Comprehensive filtering options
Sort controls for different view options
Highlight and tag features
Inline sentiment indicators

4.2.4 Topics Analysis
Implementation: Topic clustering visualization
Details:
Topic frequency visualization
Sentiment breakdown per topic
Drill-down capability to related reviews
Timeline view of topic emergence
Export specific topic analysis

4.3 UI Components
Implementation: shadcn/ui components with Tailwind customization
Details:
Card components for content grouping
Dialog components for detailed views
Form components for interactive filtering
Dropdown menus for selection interfaces
Toast notifications for system events
Tooltip components for contextual help
Lucide icons for visual consistency


5. Data Logic & Processing
5.1 Scraping Architecture
Implementation: Hybrid approach combining server-side scraping with client-side processing

Details:
1. Server-Side Components:
   - Remix loader integration with google-play-scraper
   - Controlled batch processing (100 reviews per request)
   - Basic error handling and retry logic
   - Rate limiting implementation
   - Data transformation for client consumption

2. Client-Side Processing:
   - Review analysis and sentiment scoring
   - Topic extraction and categorization
   - Real-time visualization updates
   - Progressive loading interface

3. Data Storage Strategy:
   - IndexedDB implementation for review storage
   - Separate stores for raw reviews and analysis results
   - Automatic cleanup of old data
   - Storage limit handling

4. Performance Optimizations:
   - Batch processing to stay within serverless limits
   - Client-side caching to prevent redundant fetches
   - Progressive loading with status indicators
   - Memory-efficient data processing

5. Error Handling:
   - Graceful degradation on API failures
   - Storage quota management
   - Network error recovery
   - Clear user feedback on processing status
   - Robust retry logic with the following rules:
     * Maximum 3 retry attempts per request
     * Exponential backoff between retries (1s, 2s, 4s)
     * Circuit breaker pattern for consecutive failures
     * Immediate termination conditions:
       - Zero reviews returned after first successful request
       - HTTP 404 status (app not found)
       - Rate limit exceeded response
     * Clear user feedback on termination conditions
   - Request timeout handling:
     * 10-second timeout per request
     * Automatic cancellation of pending requests on user navigation
     * Cleanup of partial data on timeout
   - Progress tracking:
     * Accurate progress indication including retry attempts
     * Clear success/failure status messages
     * Option to manually retry failed batches
     * Session history of failed requests

5.2 Analysis Pipeline
5.2.1 Sentiment Analysis
Implementation: Natural library's sentiment analyzer with batch processing
Details:
- Batch-based processing (100 reviews per batch)
- AFINN-based lexicon approach with progressive analysis
- Rating-weighted sentiment scoring
- Confidence scoring based on text length and rating correlation
- Language detection for multi-language support
- Domain-specific term adjustment
- Real-time sentiment updates as batches complete
- Caching of intermediate results in IndexedDB

5.2.2 Topic Extraction
Implementation: Natural library's TF-IDF and tokenization with batch optimization
Details:
- Batch-level topic extraction (100 reviews per batch)
- Progressive topic refinement as new batches arrive
- N-gram extraction for phrase identification
- Stop word filtering customized for app reviews
- Stemming for word normalization
- Frequency analysis with batch-aware weighting
- Topic clustering based on co-occurrence patterns
- Real-time topic cloud updates
- Web Worker implementation for heavy processing

5.2.3 Pattern Recognition
Implementation: Regular expression patterns with batch processing
Details:
- Pattern matching optimized for batch processing
- Feature request identification with confidence scoring
- Bug report classification with version correlation
- Progressive pattern detection as batches arrive
- Device-specific issue tracking
- Personal information redaction
- Real-time pattern frequency updates
- Cached pattern results in IndexedDB

5.3 State Management
Implementation: Remix-centric state management with progressive updates
Details:
- Batch-aware state management
- Progress tracking for each processing phase:
  * Scraping progress
  * Sentiment analysis status
  * Topic extraction progress
  * Pattern recognition status
- URL parameters for shareable analysis states
- IndexedDB storage structure:
  * Raw reviews store
  * Analysis results store
  * Batch metadata store
  * User preferences store
- State persistence strategy:
  * Immediate storage of raw reviews
  * Progressive storage of analysis results
  * Batch-level caching
  * Auto-cleanup of old data
- Error state handling:
  * Batch failure tracking
  * Recovery mechanisms
  * Partial results display
- Performance optimization:
  * Chunked state updates
  * Debounced UI updates
  * Progressive rendering
  * Web Worker offloading

6. Performance Requirements
6.1 Client Performance
Initial load time < 3 seconds on desktop, < 5 seconds on mobile
Time to interactive < 4 seconds
Smooth scrolling with 500+ reviews
Chart rendering < 1 second
Filter application < 300ms

6.2 Server Performance
Remix loader execution < 5 seconds for review fetching
Memory usage within Vercel serverless function limits
Caching strategy to minimize Play Store API calls
Efficient data transformation
Graceful timeout handling

6.3 Scalability Considerations
Clear UI indicators for processing limits
Recommended maximum of 1,000 reviews per analysis
Pagination controls for viewing larger datasets
Optimistic UI updates for perceived performance
Feedback mechanisms when approaching limits

7. Security Considerations
7.1 API Usage
Proper rate limiting for Play Store API requests
No storage of sensitive app information
Secure handling of any API keys via environment variables
Input validation for all user inputs
Sanitization of displayed review content
Proper handling when there is no data to be fetch. Limit maximum tries and build a robust logic to avoid infinite looping. 

7.2 Client-Side Data
No persistent server storage of scraped data
Clear privacy statements about data handling
Session-only data processing
Export options for user data ownership
No tracking beyond basic anonymized usage

8. Deployment Strategy
8.1 Vercel Deployment
Optimized Remix deployment for Vercel
Edge function usage where appropriate
Static generation for non-dynamic content
Runtime environment variable configuration

9. Limitations and Constraints
9.1 Technical Boundaries
Maximum review count (500-1000) for optimal performance
Session-based data storage only
Limited historical analysis capabilities
Play Store API limitations and rate limits
Vercel free tier constraints
Scraping Safety Measures:
- Maximum 3 consecutive empty response handling
- Automatic termination on repeated zero-review responses
- Total request timeout of 2 minutes per app
- Maximum batch retry attempts: 3 per batch
- Clear indicators for termination conditions

9.2 User Communication
Clear expectations about free tool limitations
Helpful error messages when limits are reached
Export prompts to preserve important analysis
